demo <- tribble(
~cut,         ~freq,
"Fair",       1610,
"Good",       4906,
"Very Good",  12082,
"Premium",    13791,
"Ideal",      21551
)
ggplot(data = demo) +
geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
?stat_bin
ggplot(diamonds, aes(price, colour = cut)) +
geom_freqpoly(binwidth = 500)
ggplot(diamonds, aes(price, colour = cut)) +
geom_freqpoly()
binwidth = 500
ggplot(diamonds, aes(price, colour = cut)) +
geom_freqpoly(binwidth = 500)
ggplot(diamonds, aes(price, ..density.., colour = cut)) +
geom_freqpoly(binwidth = 500)
m + geom_histogram(binwidth = 0.1)
if (require("ggplot2movies")) {
# Often we don't want the height of the bar to represent the
# count of observations, but the sum of some other variable.
# For example, the following plot shows the number of movies
# in each rating.
m <- ggplot(movies, aes(rating))
m + geom_histogram(binwidth = 0.1)
m + geom_histogram(aes(weight = votes), binwidth = 0.1) + ylab("votes")
m + geom_histogram(aes(weight = votes), binwidth = 0.1) + ylab("votes")
if (require("ggplot2movies")) {
# Often we don't want the height of the bar to represent the
# count of observations, but the sum of some other variable.
# For example, the following plot shows the number of movies
# in each rating.
m <- ggplot(movies, aes(rating))
m + geom_histogram(binwidth = 0.1)
# If, however, we want to see the number of votes cast in each
# category, we need to weight by the votes variable
m + geom_histogram(aes(weight = votes), binwidth = 0.1) + ylab("votes")
# For transformed scales, binwidth applies to the transformed data.
# The bins have constant width on the transformed scale.
m + geom_histogram() + scale_x_log10()
m + geom_histogram(binwidth = 0.05) + scale_x_log10()
# For transformed coordinate systems, the binwidth applies to the
# raw data. The bins have constant width on the original scale.
# Using log scales does not work here, because the first
# bar is anchored at zero, and so when transformed becomes negative
# infinity. This is not a problem when transforming the scales, because
# no observations have 0 ratings.
m + geom_histogram(boundary = 0) + coord_trans(x = "log10")
# Use boundary = 0, to make sure we don't take sqrt of negative values
m + geom_histogram(boundary = 0) + coord_trans(x = "sqrt")
# You can also transform the y axis.  Remember that the base of the bars
# has value 0, so log transformations are not appropriate
m <- ggplot(movies, aes(x = rating))
m + geom_histogram(binwidth = 0.5) + scale_y_sqrt()
}
d <- ggplot(mtcars, aes(cyl, mpg)) + geom_point()
d + stat_summary(fun.data = "mean_cl_boot", colour = "red", size = 2)
d <- ggplot(mtcars, aes(cyl, mpg)) + geom_point()
d + stat_summary(fun.data = "mean_cl_boot", colour = "red", size = 2)
d + stat_summary(fun.data = "mean_cl_boot", colour = "red", size = 2)
d <- ggplot(mtcars, aes(cyl, mpg)) + geom_point()
d + stat_summary(fun.data = "mean_cl_boot", colour = "red", size = 2)
ggplot(mtcars, aes(cyl, mpg)) + geom_point() +
stat_summary(fun.data = "mean_cl_boot", colour = "red", size = 2)
mtcars
2
:q
ggplot(mtcars, aes(cyl, mpg)) + geom_point() +
stat_summary(fun.data = "mean_cl_boot", colour = "red", size = 2)
ggplot(mtcars, aes(cyl, mpg)) + geom_point() +
stat_summary( colour = "red", size = 2)
ggplot(mtcars, aes(cyl, mpg)) + geom_point() +
stat_summary(fun.data = "mean_cl_boot", colour = "red", size = 2)
ggplot(mtcars, aes(cyl, mpg)) + geom_point() +
stat_summary(fun.data = "mean_cl_boot", colour = "red", size = 2)
d <- ggplot(diamonds, aes(cut))
d + geom_bar()
d + stat_summary_bin(aes(y = price), fun.y = "mean", geom = "bar")
d + geom_bar()
p <- ggplot(mtcars, aes(cyl, mpg)) +
stat_summary(fun.y = "mean", geom = "point")
p <- ggplot(mtcars, aes(cyl, mpg)) +
stat_summary(fun.y = "mean", geom = "point")
2+2
p <- ggplot(mtcars, aes(cyl, mpg)) +
stat_summary(fun.y = "mean", geom = "point")
p + ylim(15, 30)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..,group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..,group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, colour = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), position = "jitter")
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point(position = "jitter")
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_boxplot(position = "jitter")
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_jitter()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_count()
geom_boxplot
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point(position = "jitter")
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
plot(x = mpg$cty, y = mpg$hwy)
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
plot(x = mpg$cty, y = mpg$hwy)
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
bar + coord_flip()
bar
bar + coord_polar()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
coord_fixed()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
coord_fixed()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
coord_fixed()
c <- ggplot(mpg, aes(hwy))
c <- ggplot(mpg, aes(hwy))
c + geom_area(stat = "bin")
c + geom_area()
c + geom_area(stat = "bin")
c+ geom_density(kernel = "gaussian")
?geom_density
c + geom_density()
c + geom_density(alpha = .5
?geom_density
c + geom_density(alpha = .5)
c + geom_density()
c + geom_histogram()
c + geom_qq()
ggplot(mpg) + geom_qq(aes(hwy))
ggplot(mpg) + geom_qq(mapping = aes(x = hwy))
ggplot(mpg) + geom_qq(sample = hwy)
ggplot(data = mpg) + geom_qq(aes(sample = hwy))
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() + theme_bw()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() + theme_gray()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() + theme_dark()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() + theme_classic()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() + theme_minimal()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() + theme_void()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() + theme_minimal()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = drv),size = 3) +
geom_smooth(mapping = aes(linetype = drv),se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = drv),size = 3) +
geom_smooth(mapping = aes(linetype = drv),se = FALSE)  + theme_minimal()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = drv),size = 3) +
geom_smooth(mapping = aes(linetype = drv),se = FALSE)  + theme_bw()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = drv),size = 3) +
geom_smooth(mapping = aes(linetype = drv),se = FALSE)  + theme_minimal()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = drv),size = 3) +
geom_smooth(mapping = aes(linetype = drv),se = FALSE)
install.packages("nycflights13")
library(nycflights13)
flights
filter(flights, month == 1, day == 1)
flights
filter(flights, month == 1, day == 1)
filter(flights, month == 1)
datasets::flights
?nycflights13
library(nycflights13)
?nycflights13
filter(flights, month == 1)
jan1 <- filter(flights, month == 1, day == 1)
jan1 <- filter(data = flights, month == 1, day == 1)
flights
jan1 <- filter(data = flights, month == 1, day == 1)
jan1 <- filter(flights, month == 1, day == 1)
flights <- copy_to(sc, flights, "flights")
select(flights, year:day, arr_delay, dep_delay)
library("tidyverse", lib.loc="~/R/win-library/3.3")
filter(flights, month == 1, day == 1)
jan1 <- filter(flights, month == 1, day == 1)
filter(flights, month == 11 | month == 12)
filter(flights, month == 11 | month == 12)
x <- data.frame(col1 = c(A,B,C,D), col2=c(2,3,4,3))
x <- data.frame(col1 = c('A','B','C','D'), col2=c(2,3,4,3))
x
filter(x, col1 == 'A')
filter(x, col1 == 'A',col1 == 'B')
filter(x, col1 == 'A' | col1 == 'B')
filter(x, col1 == 'A' & col1 == 'B')
filter(x, col1 == 'A' & col2 == 2)
df <- tibble(x = c(1, NA, 3))
df
filter(df, x > 1)
flights
filter(flights, arr_delay > 120)
filter(flights, dest == 'HOU' | dest == 'IAH')
distinct(flights,carrier)
filter(flights, carrier %in% 'UA','AA','DL')
filter(flights, carrier %in% c('UA','AA','DL'))
filter(flights, month %in% c(7,8,9))
filter(flights, sched_arr_time - arr_time > 120, arr_delay == 0)
filter(flights, sched_arr_time - arr_time > 120)
filter(flights, sched_arr_time - arr_time > 120, dep_delay <= 0)
filter(flights, dep_delay > 30, arr_delay <= 0)
filter(flights, dep_delay > 60, arr_delay <= 0)
60*6
filter(flights, dep_time > 0, dep_time < 360)
filter(flights, between(dep_time, 0,360))
filter(flights, dep_time >= 0, dep_time <= 360))
filter(flights, dep_time >= 0, dep_time <= 360)
filter(flights, between(dep_time, 0,360))
filter(flights, is.na(dep_time))
flights %>% filter(dep_time > 0, dep_time < 360)
filter(flights, dep_time > 0, dep_time < 360)
flights %>% filter(dep_time > 0, dep_time < 360)
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
mutate(flights_sml,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60
)
rm(list = ls())
load("C:/Users/rahul/Documents/UserData/Online Training/Machine Learning A-Z/Manual/Part 2 - Regression/Section 5 - Multiple Linear Regression/Multiple_Linear_Regression/.RData")
data(mtcars)
dat <- subset(mtcars, select=c(mpg, am, vs))
ggplot(dat, aes(x=mpg, y=vs)) + geom_point() +
stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE)
(
(
df <- data.frame(a=c(1,2), b=c('A','B'))
attributes(df)
df <- data.frame(a=c(1,2), b=c('A','B'))
attributes(df)
df <- data.frame(col1=c(1,2), col2=c('A','B'))
attributes(df)
df <- data.frame(col1=c(1,2,3), col2=c('A','B','C'))
attributes(df)
df
x <= 1
x <- 1
x
class(x)
attributes(x)
x <- c(1,2)
x
attributes(x)
class(x)
y <- c(TRUE,FALSE)
class(y)
y
y <- c("Helo","Motto")
z <- c("Helo","Motto")
class(z)
c <- c(1+0i,4+2i)
class(c)
x <- c(1,2)
class(x)
i <- 5:10
class(i)
x <- c('a',2)
class(x)
y<- c(TRUE,'b')
class(b)
y <- c(TRUE,'b')
class(b)
class(y)
y <- c(TRUE,4)
class(y)
x <- 3
class(x)
as.integer(x)
class(x)
class(as.integer(x))
x <- 3
class(x)
class(as.integer(x))
x <- 3:5
class(x)
class(as.integer(x))
class(as.numeric(x))
class(as.character(x))
as.character(x)
class(as.logical(x))
as.logical(x)
x <- list(1,'a',TRUE,1+5i)
x
x <- list(1,'a',TRUE,1+5i,5)
x
mat = matrix(2,3)
mat
mat = matrix(nrow = 2,ncol = 3)
mat
dim(mat)
is.matrix(as.matrix(1:10))
as.matrix(1:10)
!is.matrix(warpbreaks)  # data.frame, NOT matrix!
warpbreaks
is.matrix(warpbreaks)  # data.frame, NOT matrix!
warpbreaks[1:10,]
as.matrix(warpbreaks[1:10,])  # using as.matrix.data.frame(.) method
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = FALSE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
attributes(mat)
m <- matrix(1:6,nrow = 2, ncol = 3)
m
m <- matrix(1:6,nrow = 2, ncol = 3)
m
m <- matrix(1:6,nrow = 2, ncol = 3, byrow = TRUE)
m
dim(m1) <- c(2,5)
m1 <- 1:10
dim(m1) <- c(2,5)
m1
t(m1)
x = 3
y = 12:14
cbind(x,y)
x = 3:5
y = 12:14
cbind(x,y)
cbind(x,y)
rbind(x,y)
x <- factor(c('yes','no','no','yes','yes','yes'))
x
table(x)
unclass(x)
df <- data.frame(foo = 1:4, bar = c(T,T,T,F))
df
nrow(df)
ncol(df)
x <- 1:3
x
names(x)
names(x) <- c("Rick","and","Morty")
x
names(x)
m <- matrix(data = 1:4, nrow = 2,ncol = 2)
m
dimnames(m) <- list(c('a','b'),c('c','d'))
m
rm(list=ls())
require(randomForest)
# Random Forest Classification
# Importing the dataset
setwd("C:/Users/rahul/Documents/UserData/Online Training/Machine Learning A-Z/Manual/Part 3 - Classification/Section 20 - Random Forest Classification")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
require(randomForest)
classifier <- randomForest(x = training_set[-3],
y = training_set$Purchased,
ntree = 10)
y_pred <- predict(object = classifier, newdata = test_set[-3])
y_pred
cm = table(test_set[, 3], y_pred)
cm
classifier <- randomForest(x = training_set[-3],
y = training_set$Purchased,
ntree = 500)
y_pred <- predict(object = classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
cm
classifier <- randomForest(x = training_set[-3],
y = training_set$Purchased,
ntree = 10)
y_pred <- predict(object = classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, type = 'class')
plot(set[, -3],
main = 'Random Forest Classification (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, type = 'class')
plot(set[, -3],
main = 'Random Forest Classification (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
